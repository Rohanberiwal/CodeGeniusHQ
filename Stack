What is a Stack?

A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle.
It is an ordered collection of elements with two main operations: push and pop.
Stacks are used to manage data in a way that the most recently added item is the first one to be removed.
2. Key Operations:

push(item): Adds an item to the top of the stack.
pop(): Removes and returns the top item from the stack.
peek(): Returns the top item without removing it.
is_empty(): Checks if the stack is empty.
size(): Returns the number of elements in the stack.
3. Implementation:

Stacks can be implemented using arrays, linked lists, or other data structures.
In Python, lists and collections.deque are commonly used for stack implementations.
4. Common Use Cases:

Function call stack: Storing function call information during recursive function calls.
Expression evaluation: Evaluating postfix expressions using a stack.
Undo mechanisms in software applications.
Managing navigation history in web browsers.
Backtracking algorithms like depth-first search (DFS).
5. Practical Applications:

Parsing and evaluating arithmetic expressions.
Solving problems that require tracking of recursive calls.
Handling nested data structures like JSON or XML.
Balancing symbols, such as parentheses in programming languages.
Memory management in computer systems.
6. Time Complexity:

Push and pop operations in a stack have a time complexity of O(1).
7. Data Structure Properties:

Limited access: Stacks have access to only the top item.
Efficient for inserting and deleting elements at one end.
Ideal for maintaining a last-in, first-out order.
8. Stack Variations:

Double-ended stacks: Allow push and pop operations from both ends.
Min-stack: A stack that keeps track of the minimum element in constant time.
Undo stacks: Used to implement undo and redo functionality in applications.
9. Stack in Memory:

The call stack is used by the program for function calls and local variables.
Memory allocation for function calls and returns follows the LIFO order.
Stack frames are used to keep track of function execution.
10. Stack vs. Heap:
- Stack and heap are different areas in a program's memory.
- Stack is used for local variables and function calls.
- Heap is used for dynamic memory allocation, such as objects and data structures.

11. Stack Overflow:

Occurs when the stack size is exceeded, typically due to excessive recursion.
Can lead to program crashes.
12. Stack in Data Structures:

Often used in combination with queues to implement algorithms like breadth-first search (BFS).
13. Hardware Stacks:

Hardware architectures use stacks for managing subroutine calls and returns.
The stack pointer keeps track of the current position in the stack.
14. Stack in Algorithms:

Used in algorithm design for tasks like finding the shortest path in graphs and solving problems in a recursive manner.
15. Thread Safety:

Stacks can be used to manage thread-specific data in multi-threaded applications.
