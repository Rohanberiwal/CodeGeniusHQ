What is a Queue?

A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle.
It is an ordered collection of elements where the first item added is the first one to be removed.
2. Key Operations:

enqueue(item): Adds an item to the back (rear) of the queue.
dequeue(): Removes and returns the front item from the queue.
peek(): Returns the front item without removing it.
is_empty(): Checks if the queue is empty.
size(): Returns the number of elements in the queue.
3. Implementation:

Queues can be implemented using arrays, linked lists, or other data structures.
In Python, collections.deque is commonly used for queue implementations.
4. Common Use Cases:

Task scheduling in operating systems.
Print job management in printers.
Order processing in e-commerce systems.
Breadth-first search (BFS) in graph algorithms.
Simulating real-world scenarios like waiting in line.
5. Practical Applications:

Managing processes and threads in multi-threaded applications.
Handling requests in web servers.
Implementing a cache with eviction policies like LRU (Least Recently Used).
Data streaming and message queuing systems.
6. Time Complexity:

Enqueue and dequeue operations in a queue have a time complexity of O(1).
7. Data Structure Properties:

Limited access: Queues have access to both the front and back, but the front is typically the primary focus.
Efficient for inserting at one end and deleting from the other end.
Ideal for maintaining a first-in, first-out order.
8. Queue Variations:

Double-ended queues (deque): Allow enqueue and dequeue operations from both ends.
Priority queues: Assign priorities to elements, and dequeue the element with the highest priority.
9. Queue in Memory:

Queues can be used to manage data waiting to be processed, such as print jobs in a printer's queue.
10. Synchronous vs. Asynchronous Queues:
- Synchronous queues block the producer until there is space in the queue or the consumer is ready.
- Asynchronous queues allow the producer to enqueue data without waiting for the consumer.

11. Queue in Data Structures:

Used in combination with stacks to implement algorithms like depth-first search (DFS).
12. Real-world Analogy:

Queues resemble real-world scenarios such as people waiting in line at a grocery store checkout.
13. Thread Safety:

Queues are used to coordinate communication between threads in multi-threaded applications.
14. Circular Queues:

Circular queues wrap around when reaching the end, making efficient use of memory.
15. Message Queues:

Message queuing systems enable asynchronous communication between distributed components, like in microservices architectures.
