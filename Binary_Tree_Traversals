Pre-order Traversal:
Pre-order traversal is a depth-first traversal method. 
It starts at the root node and explores the tree by visiting the current node, 
then moving to the left subtree, and finally to the right subtree. It's often used
for tasks that require processing the root node before its descendants.
In a binary search tree (BST), pre-order traversal can be used to create a copy of the tree,
 print the nodes in a specific order, or perform operations such as summing all node values.'
****
Technique  :
root 
left 
right 
****
In-order Traversal:
In-order traversal is another depth-first traversal technique. 
It begins at the leftmost node and proceeds to visit the left subtree, then the current node,
and finally the right subtree. In a BST, the in-order traversal visits nodes in ascending 
order of their values, making it a valuable method for tasks like searching for a specific node, checking
if a tree is a valid BST, or sorting the elements of a BST.

****
Technique  :
left 
node 
right
****

Level-order Traversal:
Level-order traversal is fundamentally different from the previous two methods
as it is a breadth-first traversal. It explores the tree by starting at the root node 
and moving level by level, visiting all nodes at the current level before progressing to the next level. 
This traversal is suitable for tasks like constructing a tree from an array, finding the depth/height of a tree,
or solving problems that involve level-specific operations. Level-order traversal is particularly useful 
for binary trees that are not necessarily BSTs.
****
Levle by - by ouput 
always the first is the rooot node 


Post order Traversal 

Start at the left child of the root node (if it exists) and visit the left subtree.
Move to the right child of the root node (if it exists) and visit the right subtree.
Finally, visit the current root node.
Post-order traversal is often used in tasks that involve operations such as deleting nodes in a tree, 
evaluating mathematical expressions represented by a tree (e.g., expression trees), and performing certain 
binary tree transformations. This traversal provides a way to ensure that you process child nodes before the parent node, 
which is useful for various tree-related algorithms and operations.
****
Techinuqe :
right
left 
node 
****

In summary, these three tree traversal techniques offer distinct
approaches to exploring binary tree structures. 
Pre-order and in-order traversals are depth-first and often used
for tasks related to tree structure and content, while level-order traversal is a 
breadth-first method that is advantageous for level-based analysis and manipulation of trees.


level order  -> BFS ALgorithm 
in order and the pre-order  , post order  ->DFS algroithm 

